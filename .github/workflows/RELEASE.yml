# This is a basic workflow to help you get started with Actions

name: RELEASE

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  release:
    if: startsWith(github.event.head_commit.message, '[release]') == true
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Can build any Java version
    strategy:
      matrix:
        java: [ '11' ]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Code Checkout
      - name: Code Checkout
        uses: actions/checkout@v3
      # Runs as Java
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}
      - name: Builds Maven Settings
        uses: whelk-io/maven-settings-xml-action@v20
        with:
          servers: |
            [{
                "id": "github",
                "username": "${{ secrets.GH_USERNAME }}",
                "password": "${{ secrets.GH_TOKEN }}"
            }]
          repositories: |
            [{
                "id": "github",
                "url": "https://maven.pkg.github.com/BananazTechnology/bot-core"
            }]
      # Run commands using shell runner
      - name: Maven verify build
        run: |
          mvn -V --fail-fast --no-transfer-progress --batch-mode clean package -DskipTests
      #
      # The next 2 steps gather project ifo from the Java application
      # Get POM version
      - name: Extract Maven project version
        run: echo "version=$(bash mvnw -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
        id: project
      # Get project name
      - name: Extract Maven project name
        run: echo "artifactId=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.artifactId}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
        id: artifact
      # Get Bananaz Core version
      - name: Extract Maven Bananaz Core Version
        run: echo "version=$(mvn -q -Dexec.executable=echo -Dexec.args='${bananaz.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
        id: btCore
      #
      # Docker build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      #
      # Setup DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      #
      # Setup Github Secure Registry
      - name: Login to GitHub
        uses: docker/login-action@v2 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      # Docker image metadata
      - name: Build Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          labels: |
            tech.bananaz.app.version=${{ steps.project.outputs.version }}
            tech.bananaz.core.version=${{ steps.btCore.outputs.version }}
            tech.bananaz.maintainer=contact@bananaz.tech
          tags: |
            type=semver,pattern={{version}},value=${{ steps.project.outputs.version }}
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.artifact.outputs.artifactId }}
            ghcr.io/${{ github.repository }}
      - name: Build Dockerfile and Push
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}